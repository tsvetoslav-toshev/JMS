#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Data Population Script for Jewelry Management System

This script populates the database with realistic test data that follows
the correct warehouse-centric inventory model:

WAREHOUSE (items.stock_quantity) ‚Üí SHOPS (shop_items.quantity) ‚Üí SALES

DO NOT modify the main application - this is just for testing!
"""

import sqlite3
import os
import random
from datetime import datetime, timedelta

def populate_test_data():
    """Populate database with realistic test data following correct architecture"""
    try:
        # Connect to database
        db_path = os.path.join("data", "jewelry.db")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîÑ Starting test data population...")
        
        # 1. CREATE TEST SHOPS
        test_shops = [
            "–ú–∞–≥–∞–∑–∏–Ω –¶–µ–Ω—Ç—ä—Ä",
            "–ú–∞–≥–∞–∑–∏–Ω –ú–æ–ª", 
            "–ú–∞–≥–∞–∑–∏–Ω –ü–µ—à–µ—Ö–æ–¥–Ω–∞"
        ]
        
        for shop_name in test_shops:
            cursor.execute("INSERT OR IGNORE INTO shops (name) VALUES (?)", (shop_name,))
        
        print("‚úÖ Test shops created")
        
        # 2. CREATE TEST ITEMS (in warehouse only - no shop_id column!)
        test_items = [
            # Rings
            ("1000001", "–ó–ª–∞—Ç–µ–Ω –ø—Ä—ä—Å—Ç–µ–Ω —Å –¥–∏–∞–º–∞–Ω—Ç", "–ü—Ä—ä—Å—Ç–µ–Ω —Å 0.5ct –¥–∏–∞–º–∞–Ω—Ç", "–ü—Ä—ä—Å—Ç–µ–Ω–∏", 2500.00, 1800.00, 3.5, "–ó–ª–∞—Ç–æ 18K", "–î–∏–∞–º–∞–Ω—Ç", 15),
            ("1000002", "–°—Ä–µ–±—ä—Ä–µ–Ω –ø—Ä—ä—Å—Ç–µ–Ω", "–ï–ª–µ–≥–∞–Ω—Ç–µ–Ω —Å—Ä–µ–±—ä—Ä–µ–Ω –ø—Ä—ä—Å—Ç–µ–Ω", "–ü—Ä—ä—Å—Ç–µ–Ω–∏", 150.00, 90.00, 2.8, "–°—Ä–µ–±—Ä–æ 925", "–ù—è–º–∞", 25),
            ("1000003", "–ü—Ä—ä—Å—Ç–µ–Ω —Å —Ä—É–±–∏–Ω", "–ö–ª–∞—Å–∏—á–µ—Å–∫–∏ –ø—Ä—ä—Å—Ç–µ–Ω —Å —Ä—É–±–∏–Ω", "–ü—Ä—ä—Å—Ç–µ–Ω–∏", 1800.00, 1200.00, 4.2, "–ó–ª–∞—Ç–æ 14K", "–†—É–±–∏–Ω", 8),
            ("1000004", "–ü—Ä—ä—Å—Ç–µ–Ω —Å –∏–∑—É–º—Ä—É–¥", "–ï–ª–µ–≥–∞–Ω—Ç–µ–Ω –ø—Ä—ä—Å—Ç–µ–Ω —Å –∏–∑—É–º—Ä—É–¥", "–ü—Ä—ä—Å—Ç–µ–Ω–∏", 2200.00, 1600.00, 3.8, "–ó–ª–∞—Ç–æ 18K", "–ò–∑—É–º—Ä—É–¥", 6),
            ("1000005", "–°—Ä–µ–±—ä—Ä–µ–Ω –ø—Ä—ä—Å—Ç–µ–Ω —Å —Ü–∏—Ä–∫–æ–Ω", "–ú–æ–¥–µ—Ä–µ–Ω –ø—Ä—ä—Å—Ç–µ–Ω —Å —Ü–∏—Ä–∫–æ–Ω", "–ü—Ä—ä—Å—Ç–µ–Ω–∏", 95.00, 55.00, 2.2, "–°—Ä–µ–±—Ä–æ 925", "–¶–∏—Ä–∫–æ–Ω", 35),
            
            # Necklaces  
            ("2000001", "–ó–ª–∞—Ç–Ω–∞ –≤–µ—Ä–∏–∂–∫–∞", "–ï–ª–µ–≥–∞–Ω—Ç–Ω–∞ –∑–ª–∞—Ç–Ω–∞ –≤–µ—Ä–∏–∂–∫–∞ 45—Å–º", "–ö–æ–ª–∏–µ—Ç–∞", 890.00, 650.00, 12.5, "–ó–ª–∞—Ç–æ 14K", "–ù—è–º–∞", 20),
            ("2000002", "–°—Ä–µ–±—ä—Ä–Ω–æ –∫–æ–ª–∏–µ —Å –ø–µ—Ä–ª–∞", "–ö–æ–ª–∏–µ —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–∞ –ø–µ—Ä–ª–∞", "–ö–æ–ª–∏–µ—Ç–∞", 320.00, 180.00, 8.3, "–°—Ä–µ–±—Ä–æ 925", "–ü–µ—Ä–ª–∞", 12),
            ("2000003", "–í–µ—Ä–∏–∂–∫–∞ —Å –≤–∏—Å—É–ª–∫–∞", "–ó–ª–∞—Ç–Ω–∞ –≤–µ—Ä–∏–∂–∫–∞ —Å –¥–∏–∞–º–∞–Ω—Ç–µ–Ω–∞ –≤–∏—Å—É–ª–∫–∞", "–ö–æ–ª–∏–µ—Ç–∞", 1500.00, 1100.00, 6.7, "–ó–ª–∞—Ç–æ 18K", "–î–∏–∞–º–∞–Ω—Ç", 6),
            ("2000004", "–°—Ä–µ–±—ä—Ä–Ω–∞ –≤–µ—Ä–∏–∂–∫–∞", "–ö–ª–∞—Å–∏—á–µ—Å–∫–∞ —Å—Ä–µ–±—ä—Ä–Ω–∞ –≤–µ—Ä–∏–∂–∫–∞", "–ö–æ–ª–∏–µ—Ç–∞", 180.00, 110.00, 8.9, "–°—Ä–µ–±—Ä–æ 925", "–ù—è–º–∞", 28),
            ("2000005", "–ö–æ–ª–∏–µ —Å –∞–º–µ—Ç–∏—Å—Ç", "–ö—Ä–∞—Å–∏–≤–æ –∫–æ–ª–∏–µ —Å –∞–º–µ—Ç–∏—Å—Ç", "–ö–æ–ª–∏–µ—Ç–∞", 450.00, 280.00, 5.4, "–°—Ä–µ–±—Ä–æ 925", "–ê–º–µ—Ç–∏—Å—Ç", 14),
            
            # Earrings
            ("3000001", "–ó–ª–∞—Ç–Ω–∏ –æ–±–µ—Ü–∏", "–ö–ª–∞—Å–∏—á–µ—Å–∫–∏ –∑–ª–∞—Ç–Ω–∏ –æ–±–µ—Ü–∏", "–û–±–µ—Ü–∏", 450.00, 300.00, 2.1, "–ó–ª–∞—Ç–æ 14K", "–ù—è–º–∞", 30),
            ("3000002", "–û–±–µ—Ü–∏ —Å –∏–∑—É–º—Ä—É–¥", "–û–±–µ—Ü–∏ —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω –∏–∑—É–º—Ä—É–¥", "–û–±–µ—Ü–∏", 2200.00, 1600.00, 3.8, "–ó–ª–∞—Ç–æ 18K", "–ò–∑—É–º—Ä—É–¥", 4),
            ("3000003", "–°—Ä–µ–±—ä—Ä–Ω–∏ –æ–±–µ—Ü–∏", "–ú–æ–¥–µ—Ä–Ω–∏ —Å—Ä–µ–±—ä—Ä–Ω–∏ –æ–±–µ—Ü–∏", "–û–±–µ—Ü–∏", 120.00, 75.00, 1.9, "–°—Ä–µ–±—Ä–æ 925", "–ù—è–º–∞", 40),
            ("3000004", "–û–±–µ—Ü–∏ —Å –ø–µ—Ä–ª–∏", "–ï–ª–µ–≥–∞–Ω—Ç–Ω–∏ –æ–±–µ—Ü–∏ —Å –ø–µ—Ä–ª–∏", "–û–±–µ—Ü–∏", 280.00, 180.00, 2.5, "–°—Ä–µ–±—Ä–æ 925", "–ü–µ—Ä–ª–∞", 22),
            ("3000005", "–ó–ª–∞—Ç–Ω–∏ –æ–±–µ—Ü–∏ —Å —Ü–∏—Ä–∫–æ–Ω", "–ë–ª–µ—Å—Ç—è—â–∏ –æ–±–µ—Ü–∏ —Å —Ü–∏—Ä–∫–æ–Ω", "–û–±–µ—Ü–∏", 350.00, 220.00, 2.8, "–ó–ª–∞—Ç–æ 14K", "–¶–∏—Ä–∫–æ–Ω", 18),
            
            # Bracelets
            ("4000001", "–ó–ª–∞—Ç–Ω–∞ –≥—Ä–∏–≤–Ω–∞", "–ï–ª–µ–≥–∞–Ω—Ç–Ω–∞ –∑–ª–∞—Ç–Ω–∞ –≥—Ä–∏–≤–Ω–∞", "–ì—Ä–∏–≤–Ω–∏", 680.00, 480.00, 15.2, "–ó–ª–∞—Ç–æ 14K", "–ù—è–º–∞", 18),
            ("4000002", "–°—Ä–µ–±—ä—Ä–Ω–∞ –≥—Ä–∏–≤–Ω–∞ —Å –∫–∞–º—ä–Ω–∏", "–ì—Ä–∏–≤–Ω–∞ —Å –ø–æ–ª—É—Å–∫—ä–ø–æ—Ü–µ–Ω–Ω–∏ –∫–∞–º—ä–Ω–∏", "–ì—Ä–∏–≤–Ω–∏", 280.00, 160.00, 25.6, "–°—Ä–µ–±—Ä–æ 925", "–ê–º–µ—Ç–∏—Å—Ç", 22),
            ("4000003", "–ó–ª–∞—Ç–Ω–∞ –≥—Ä–∏–≤–Ω–∞ —Å –¥–∏–∞–º–∞–Ω—Ç–∏", "–õ—É–∫—Å–æ–∑–Ω–∞ –≥—Ä–∏–≤–Ω–∞ —Å –¥–∏–∞–º–∞–Ω—Ç–∏", "–ì—Ä–∏–≤–Ω–∏", 3200.00, 2400.00, 18.7, "–ó–ª–∞—Ç–æ 18K", "–î–∏–∞–º–∞–Ω—Ç", 3),
            ("4000004", "–°—Ä–µ–±—ä—Ä–Ω–∞ –≥—Ä–∏–≤–Ω–∞", "–ö–ª–∞—Å–∏—á–µ—Å–∫–∞ —Å—Ä–µ–±—ä—Ä–Ω–∞ –≥—Ä–∏–≤–Ω–∞", "–ì—Ä–∏–≤–Ω–∏", 150.00, 95.00, 22.3, "–°—Ä–µ–±—Ä–æ 925", "–ù—è–º–∞", 25),
            
            # Watches
            ("5000001", "–ó–ª–∞—Ç–µ–Ω —á–∞—Å–æ–≤–Ω–∏–∫", "–õ—É–∫—Å–æ–∑–µ–Ω –∑–ª–∞—Ç–µ–Ω —á–∞—Å–æ–≤–Ω–∏–∫", "–ß–∞—Å–æ–≤–Ω–∏—Ü–∏", 3500.00, 2800.00, 85.0, "–ó–ª–∞—Ç–æ 18K", "–°–∞—Ñ–∏—Ä", 3),
            ("5000002", "–°—Ä–µ–±—ä—Ä–µ–Ω —á–∞—Å–æ–≤–Ω–∏–∫", "–ï–ª–µ–≥–∞–Ω—Ç–µ–Ω —Å—Ä–µ–±—ä—Ä–µ–Ω —á–∞—Å–æ–≤–Ω–∏–∫", "–ß–∞—Å–æ–≤–Ω–∏—Ü–∏", 850.00, 600.00, 65.0, "–°—Ä–µ–±—Ä–æ 925", "–ù—è–º–∞", 8),
            ("5000003", "–î–∞–º—Å–∫–∏ –∑–ª–∞—Ç–µ–Ω —á–∞—Å–æ–≤–Ω–∏–∫", "–§–∏–Ω –¥–∞–º—Å–∫–∏ —á–∞—Å–æ–≤–Ω–∏–∫", "–ß–∞—Å–æ–≤–Ω–∏—Ü–∏", 1200.00, 900.00, 45.0, "–ó–ª–∞—Ç–æ 14K", "–ù—è–º–∞", 5),
            
            # Low stock items for testing
            ("6000001", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Å–µ—Ä–∏—è –ø—Ä—ä—Å—Ç–µ–Ω", "–°–ø–µ—Ü–∏–∞–ª–µ–Ω –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏ –ø—Ä—ä—Å—Ç–µ–Ω", "–ü—Ä—ä—Å—Ç–µ–Ω–∏", 5500.00, 4200.00, 4.8, "–ü–ª–∞—Ç–∏–Ω–∞", "–î–∏–∞–º–∞–Ω—Ç", 2),
            ("6000002", "–ê–Ω—Ç–∏—á–Ω–æ –∫–æ–ª–∏–µ", "–í—ä–∑—Å—Ç–∞–Ω–æ–≤–µ–Ω–æ –∞–Ω—Ç–∏—á–Ω–æ –∫–æ–ª–∏–µ", "–ö–æ–ª–∏–µ—Ç–∞", 1800.00, 1200.00, 12.0, "–ó–ª–∞—Ç–æ 14K", "–†—É–±–∏–Ω", 1),
            ("6000003", "–ï–∫—Å–∫–ª—É–∑–∏–≤–Ω–∏ –æ–±–µ—Ü–∏", "–†—ä—á–Ω–æ –∏–∑—Ä–∞–±–æ—Ç–µ–Ω–∏ –æ–±–µ—Ü–∏", "–û–±–µ—Ü–∏", 980.00, 650.00, 3.2, "–°—Ä–µ–±—Ä–æ 925", "–¢–∞–Ω–∑–∞–Ω–∏—Ç", 3),
        ]
        
        for barcode, name, description, category, price, cost, weight, metal_type, stone_type, stock_qty in test_items:
            cursor.execute("""
                INSERT OR IGNORE INTO items 
                (barcode, name, description, category, price, cost, weight, metal_type, stone_type, stock_quantity) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (barcode, name, description, category, price, cost, weight, metal_type, stone_type, stock_qty))
        
        print("‚úÖ Test items created in warehouse")
        
        # 3. DISTRIBUTE ITEMS TO SHOPS (simulate warehouse‚Üíshop transfers)
        cursor.execute("SELECT id, name FROM shops")
        shops = cursor.fetchall()
        
        cursor.execute("SELECT id, barcode, stock_quantity FROM items")
        items = cursor.fetchall()
        
        print("üîÑ Distributing items to shops...")
        
        for item_id, barcode, warehouse_qty in items:
            if warehouse_qty <= 0:
                continue
                
            # Randomly distribute 50-80% of warehouse stock to shops
            total_to_distribute = int(warehouse_qty * random.uniform(0.5, 0.8))
            remaining_to_distribute = total_to_distribute
            
            for i, (shop_id, shop_name) in enumerate(shops):
                if remaining_to_distribute <= 0:
                    break
                    
                # Randomly decide if this shop gets this item (80% chance)
                if random.random() < 0.8:
                    # Last shop gets remaining quantity, others get random portion
                    if i == len(shops) - 1:
                        shop_qty = remaining_to_distribute
                    else:
                        max_for_shop = remaining_to_distribute // max(1, (len(shops) - i))
                        shop_qty = random.randint(1, max(1, max_for_shop))
                    
                    if shop_qty > 0:
                        # Add to shop_items
                        cursor.execute("""
                            INSERT OR REPLACE INTO shop_items 
                            (shop_id, item_id, quantity, created_at, updated_at) 
                            VALUES (?, ?, ?, datetime('now', 'localtime'), datetime('now', 'localtime'))
                        """, (shop_id, item_id, shop_qty))
                        
                        remaining_to_distribute -= shop_qty
            
            # Update warehouse stock (decrease by distributed amount)
            distributed_amount = total_to_distribute - remaining_to_distribute
            if distributed_amount > 0:
                cursor.execute("""
                    UPDATE items SET stock_quantity = stock_quantity - ?, updated_at = datetime('now', 'localtime') 
                    WHERE id = ?
                """, (distributed_amount, item_id))
        
        print("‚úÖ Items distributed to shops")
        
        # 4. CREATE TEST SALES (from shop inventories only!)
        print("üîÑ Creating test sales...")
        
        # Generate sales for last 45 days
        for days_ago in range(45):
            sale_date = datetime.now() - timedelta(days=days_ago)
            
            # Random number of sales per day (1-6)
            daily_sales = random.randint(1, 6)
            
            for _ in range(daily_sales):
                # Pick random shop that has inventory
                cursor.execute("""
                    SELECT si.shop_id, si.item_id, si.quantity, i.price, i.barcode, s.name
                    FROM shop_items si 
                    JOIN items i ON si.item_id = i.id 
                    JOIN shops s ON si.shop_id = s.id
                    WHERE si.quantity > 0
                """)
                available_items = cursor.fetchall()
                
                if available_items:
                    shop_id, item_id, available_qty, item_price, barcode, shop_name = random.choice(available_items)
                    
                    # Usually sell 1 item, sometimes 2
                    sale_qty = random.choices([1, 2], weights=[85, 15])[0]
                    sale_qty = min(sale_qty, available_qty)  # Don't oversell
                    
                    total_price = item_price * sale_qty
                    
                    # Add some time variation to sale_date
                    hours_offset = random.randint(9, 19)  # Business hours
                    minutes_offset = random.randint(0, 59)
                    sale_datetime = sale_date.replace(hour=hours_offset, minute=minutes_offset, second=0)
                    
                    # Record sale
                    cursor.execute("""
                        INSERT INTO sales (item_id, quantity, total_price, sale_date, shop_id) 
                        VALUES (?, ?, ?, ?, ?)
                    """, (item_id, sale_qty, total_price, sale_datetime.strftime('%Y-%m-%d %H:%M:%S'), shop_id))
                    
                    # Decrease shop inventory (following the same logic as the app)
                    if available_qty == sale_qty:
                        cursor.execute("DELETE FROM shop_items WHERE shop_id = ? AND item_id = ?", 
                                     (shop_id, item_id))
                    else:
                        cursor.execute("""
                            UPDATE shop_items SET quantity = quantity - ?, updated_at = datetime('now', 'localtime') 
                            WHERE shop_id = ? AND item_id = ?
                        """, (sale_qty, shop_id, item_id))
        
        print("‚úÖ Test sales created")
        
        # 5. CREATE SOME CUSTOM VALUES
        custom_categories = ["VIP –ö–ª–∏–µ–Ω—Ç–∏", "–°–≤–∞—Ç–±–µ–Ω–∏ –∫–æ–ª–µ–∫—Ü–∏–∏", "–ú—ä–∂–∫–∏ –±–∏–∂—É—Ç–∞", "–î–µ—Ç—Å–∫–∏ –±–∏–∂—É—Ç–∞", "–í–∏–Ω—Ç–∏–¥–∂ –∫–æ–ª–µ–∫—Ü–∏—è"]
        for category in custom_categories:
            cursor.execute("INSERT OR IGNORE INTO custom_values (type, value) VALUES (?, ?)", 
                         ("category", category))
        
        custom_metals = ["–ü–ª–∞—Ç–∏–Ω–∞", "–¢–∏—Ç–∞–Ω", "–†–æ–∑–æ–≤–æ –∑–ª–∞—Ç–æ", "–ë—è–ª–æ –∑–ª–∞—Ç–æ"]
        for metal in custom_metals:
            cursor.execute("INSERT OR IGNORE INTO custom_values (type, value) VALUES (?, ?)", 
                         ("metal_type", metal))
        
        custom_stones = ["–¢–∞–Ω–∑–∞–Ω–∏—Ç", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏—Ç", "–û–ø–∞–ª", "–¢—É—Ä–º–∞–ª–∏–Ω", "–¢–æ–ø–∞–∑", "–ì—Ä–∞–Ω–∞—Ç"]
        for stone in custom_stones:
            cursor.execute("INSERT OR IGNORE INTO custom_values (type, value) VALUES (?, ?)", 
                         ("stone_type", stone))
        
        print("‚úÖ Custom values created")
        
        # Commit all changes
        conn.commit()
        conn.close()
        
        print("üéâ Test data population completed successfully!")
        print()
        print("üìä SUMMARY:")
        print(f"   ‚Ä¢ Created {len(test_shops)} test shops")
        print(f"   ‚Ä¢ Added {len(test_items)} items to warehouse")
        print(f"   ‚Ä¢ Distributed items to shops (warehouse‚Üíshop transfers)")
        print(f"   ‚Ä¢ Generated sales for last 45 days (shop‚Üícustomer)")
        print(f"   ‚Ä¢ Added custom categories, metals, and stones")
        print()
        print("üèóÔ∏è ARCHITECTURE CONFIRMED:")
        print("   ‚Ä¢ WAREHOUSE: items.stock_quantity (central inventory)")
        print("   ‚Ä¢ SHOPS: shop_items.quantity (distributed inventory)")
        print("   ‚Ä¢ SALES: shop_id tracked, only shop inventory affected")
        print()
        print("üöÄ You can now test all export functionalities!")
        print("   Test the comprehensive report to see how data flows!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error populating test data: {e}")
        import traceback
        traceback.print_exc()
        return False

def cleanup_test_data():
    """Remove all test data from database"""
    try:
        db_path = os.path.join("data", "jewelry.db")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üßπ Cleaning up test data...")
        
        # Delete in reverse order to respect foreign keys
        cursor.execute("DELETE FROM sales")
        cursor.execute("DELETE FROM shop_items") 
        cursor.execute("DELETE FROM items")
        cursor.execute("DELETE FROM custom_values")
        
        # Keep only the first shop, delete test shops
        cursor.execute("DELETE FROM shops WHERE name != '–ú–∞–≥–∞–∑–∏–Ω 1'")
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Test data cleanup completed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error cleaning up test data: {e}")
        return False

def main():
    """Main function with user interface"""
    print("=" * 60)
    print("  JEWELRY MANAGEMENT - TEST DATA POPULATION")
    print("=" * 60)
    print()
    
    while True:
        print("ü§î What would you like to do?")
        print("1) Populate test data")
        print("2) Cleanup test data")
        print("3) Exit")
        print()
        
        choice = input("Enter choice (1, 2, or 3): ").strip()
        
        if choice == "1":
            print()
            if populate_test_data():
                print()
                print("‚úÖ SUCCESS! Test data has been populated.")
                print("   You can now test export functionalities.")
            else:
                print()
                print("‚ùå FAILED! Could not populate test data.")
            break
            
        elif choice == "2":
            print()
            confirm = input("‚ö†Ô∏è  Are you sure you want to delete all test data? (y/N): ").strip().lower()
            if confirm in ['y', 'yes']:
                if cleanup_test_data():
                    print()
                    print("‚úÖ SUCCESS! Test data has been cleaned up.")
                else:
                    print()
                    print("‚ùå FAILED! Could not cleanup test data.")
            else:
                print("Cleanup cancelled.")
            break
            
        elif choice == "3":
            print("üëã Goodbye!")
            break
            
        else:
            print("‚ùå Invalid choice. Please enter 1, 2, or 3.")
            print()
    
    print()
    input("üìã Press Enter to exit...")

if __name__ == "__main__":
    main()
